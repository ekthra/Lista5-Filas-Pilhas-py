# -*- coding: utf-8 -*-
"""Lista5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_29pIEyw4Zjsl2YGBu97s47vT8Jg72MM

1. Você está desenvolvendo um sistema de fila de impressão para uma empresa. Os documentos são
adicionados à fila e impressos na ordem em que foram recebidos. Implemente um programa Python
que use a classe de fila para simular esse processo. Apresente algumas situações para inserir
documentos na fila e verificar situações como: o primeiro da fila, o último da fila, quantos estão na fila.
"""

import numpy as np

class Fila:
    def __init__(self, capacidade):
        self.capacidade = capacidade
        self.fila = np.empty(capacidade, dtype=object)
        self.inicio = 0
        self.final = -1
        self.n_elementos = 0

    def fila_cheia(self):
        return self.n_elementos == self.capacidade

    def fila_vazia(self):
        return self.n_elementos == 0

    def enfileirar(self, tarefa):
        if self.fila_cheia():
            print("A lista de tarefas está cheia.")
            return
        self.final = (self.final + 1) % self.capacidade
        self.fila[self.final] = tarefa
        self.n_elementos += 1
        print(f"Tarefa adicionada: '{tarefa}'")

    def desenfileirar(self):
        if self.fila_vazia():
            print("Nenhuma tarefa pendente.")
            return
        tarefa = self.fila[self.inicio]
        self.inicio = (self.inicio + 1) % self.capacidade
        self.n_elementos -= 1
        print(f"Tarefa concluída: '{tarefa}'")
        return tarefa

    def primeiro(self):
        if self.fila_vazia():
            return "Nenhuma tarefa pendente"
        return self.fila[self.inicio]

    def ultimo(self):
        if self.fila_vazia():
            return "Nenhuma tarefa pendente"
        return self.fila[self.final]

    def tamanho(self):
        return self.n_elementos

"""2. Você está desenvolvendo um sistema de fila de atendimento para um banco. Os clientes entram na fila
e são atendidos pelos funcionários na ordem de chegada. Use a classe de fila para simular o atendimento
dos clientes. Apresente algumas situações para inserir documentos na fila e verificar situações como: o
primeiro da fila, o último da fila, quantos estão na fila.
"""

fila_banco = Fila(5)


fila_banco.enfileirar("João")
fila_banco.enfileirar("Maria")
fila_banco.enfileirar("Carlos")


print("\n--- Situação atual da fila ---")
print(f"Primeiro da fila: {fila_banco.primeiro()}")
print(f"Último da fila: {fila_banco.ultimo()}")
print(f"Total de clientes na fila: {fila_banco.tamanho()}")


fila_banco.desenfileirar()


fila_banco.enfileirar("Ana")


print("\n--- Situação atual da fila após atendimento e novo cliente ---")
print(f"Primeiro da fila: {fila_banco.primeiro()}")
print(f"Último da fila: {fila_banco.ultimo()}")
print(f"Total de clientes na fila: {fila_banco.tamanho()}")


fila_banco.enfileirar("Pedro")
fila_banco.enfileirar("Lucas")
fila_banco.enfileirar("Juliana")
print("\n--- Situação final ---")
print(f"Total de clientes na fila: {fila_banco.tamanho()}")

"""3. Imagine um sistema de gerenciamento de pedidos para um restaurante. Os pedidos dos clientes são
colocados em uma fila e processados na ordem em que foram feitos. Use a classe de fila para gerenciar
os pedidos e processá-los na ordem correta. Apresente algumas situações para inserir documentos na
fila e verificar situações como: o primeiro da fila, o último da fila, quantos estão na fila.
"""

fila_pedidos = Fila(5)

def novo_pedido(pedido):
    fila_pedidos.enfileirar(pedido)


def processar_pedido():
    fila_pedidos.desenfileirar()


def status_fila():
    print("\n--- Status Atual da Fila ---")
    print(f"Primeiro pedido da fila: {fila_pedidos.primeiro()}")
    print(f"Último pedido da fila: {fila_pedidos.ultimo()}")
    print(f"Total de pedidos na fila: {fila_pedidos.tamanho()}")
    print("-----------------------------")

novo_pedido("Pedido #001 - Hambúrguer")
novo_pedido("Pedido #002 - Pizza")
novo_pedido("Pedido #003 - Salada")

status_fila()


processar_pedido()

novo_pedido("Pedido #004 - Sushi")

status_fila()

novo_pedido("Pedido #005 - Lasanha")
novo_pedido("Pedido #006 - Tacos")

status_fila()


while not fila_pedidos.fila_vazia():
    processar_pedido()

status_fila()

"""4. Você está criando um aplicativo de lista de tarefas pendentes. As tarefas são adicionadas à fila e
concluídas uma por uma. Use a classe de fila para implementar a lista de tarefas e concluir as tarefas
na ordem em que foram adicionadas.
"""

lista_tarefas = Fila(5)


lista_tarefas.enfileirar("Estudar para a prova de matemática")
lista_tarefas.enfileirar("Pagar contas online")
lista_tarefas.enfileirar("Levar o cachorro para passear")


print("\n--- Tarefas Pendentes ---")
print("Próxima tarefa:", lista_tarefas.primeiro())
print("Última tarefa adicionada:", lista_tarefas.ultimo())
print("Total de tarefas pendentes:", lista_tarefas.tamanho())


lista_tarefas.desenfileirar()


lista_tarefas.enfileirar("Enviar e-mails de trabalho")


print("\n--- Atualização das Tarefas ---")
print("Próxima tarefa:", lista_tarefas.primeiro())
print("Última tarefa adicionada:", lista_tarefas.ultimo())
print("Total de tarefas pendentes:", lista_tarefas.tamanho())


while not lista_tarefas.fila_vazia():
    lista_tarefas.desenfileirar()

print("\n--- Lista de Tarefas Concluída ---")
print("Tarefas pendentes:", lista_tarefas.tamanho())

"""5. Em um sistema de comércio eletrônico, os pedidos online são processados em uma fila. Implemente
uma classe de fila que gerencie os pedidos online e processe-os na ordem de chegada.
"""

fila_ecommerce = Fila(5)


fila_ecommerce.enfileirar("Pedido #1001 - Camiseta")
fila_ecommerce.enfileirar("Pedido #1002 - Tênis")
fila_ecommerce.enfileirar("Pedido #1003 - Notebook")

print("\n--- Status Atual dos Pedidos ---")
print("Primeiro pedido:", fila_ecommerce.primeiro())
print("Último pedido:", fila_ecommerce.ultimo())
print("Total de pedidos:", fila_ecommerce.tamanho())


fila_ecommerce.desenfileirar()


fila_ecommerce.enfileirar("Pedido #1004 - Fone de ouvido")

print("\n--- Situação Atualizada ---")
print("Primeiro pedido:", fila_ecommerce.primeiro())
print("Último pedido:", fila_ecommerce.ultimo())
print("Total de pedidos:", fila_ecommerce.tamanho())

"""6. Imagine que você está desenvolvendo um navegador web simplificado. Use uma pilha para armazenar
o histórico de páginas visitadas pelos usuários e implementar as funcionalidades de voltar e avançar na
navegação.
"""

class Pilha:

    def __init__(self):
        self.items = []

    def empilhar(self, item):
        self.items = self.items + [item]

    def desempilhar(self):
        if not self.is_vazia():
            item_removido = self.items[-1]
            self.items = self.items[:-1]
            return item_removido
        else:
            print("A pilha está vazia. Não é possível desempilhar.")

    def topo(self):
        if not self.is_vazia():
            return self.items[-1]
        else:
            print("A pilha está vazia. Não há topo para visualizar.")

    def is_vazia(self):
        return len(self.items) == 0

    def tamanho(self):
        return len(self.items)

    def imprimir(self):
        if not self.is_vazia():
            print("Itens da pilha:")
            for item in self.items:
                print(item)
        else:
            print("A pilha está vazia. Não há itens para imprimir.")

historico_atras = Pilha()
historico_frente = Pilha()


pagina_atual = "home.com"
print("Página atual:", pagina_atual)

def visitar_pagina(nova_pagina):
    global pagina_atual
    historico_atras.empilhar(pagina_atual)
    pagina_atual = nova_pagina
    historico_frente = Pilha()
    print("Visitando:", pagina_atual)

def voltar():
    global pagina_atual
    if historico_atras.is_vazia():
        print("Não há páginas anteriores.")
    else:
        historico_frente.empilhar(pagina_atual)
        pagina_atual = historico_atras.desempilhar()
        print("Voltando para:", pagina_atual)

def avancar():
    global pagina_atual
    if historico_frente.is_vazia():
        print("Não há páginas à frente.")
    else:
        historico_atras.empilhar(pagina_atual)
        pagina_atual = historico_frente.desempilhar()
        print("Avançando para:", pagina_atual)


visitar_pagina("google.com")
visitar_pagina("openai.com")
visitar_pagina("github.com")

voltar()
voltar()
avancar()

print("Página atual final:", pagina_atual)

"""7. Crie uma calculadora que avalia expressões matemáticas no formato Notação Polonesa Reversa (RPN).
Use uma pilha para armazenar os operandos e operadores e realizar os cálculos.
"""

def calcular_rpn(expressao):
    pilha = Pilha()
    tokens = expressao.split()

    for token in tokens:
        if token.isdigit():
            pilha.empilhar(int(token))
        elif token.replace('.', '', 1).isdigit():  # suporta números decimais
            pilha.empilhar(float(token))
        elif token in ['+', '-', '*', '/']:
            try:
                b = pilha.desempilhar()
                a = pilha.desempilhar()
                resultado = None

                if token == '+':
                    resultado = a + b
                elif token == '-':
                    resultado = a - b
                elif token == '*':
                    resultado = a * b
                elif token == '/':
                    resultado = a / b

                pilha.empilhar(resultado)
            except Exception as e:
                return f"Erro: {e}"
        else:
            return f"Token inválido: {token}"

    if pilha.tamanho() == 1:
        return pilha.desempilhar()
    else:
        return "Erro: Expressão inválida."


calcular = calcular_rpn("3 4 +")
print(calcular)

"""8. Em um programa de edição de texto, implemente a funcionalidade de "Desfazer" e "Refazer" usando
uma pilha para armazenar o histórico de comandos executados pelo usuário.
"""

class EditorTexto:
    def __init__(self):
        self.texto = ""
        self.desfazer_pilha = Pilha()
        self.refazer_pilha = Pilha()

    def escrever(self, novo_texto):
        self.desfazer_pilha.empilhar(self.texto)
        self.texto += novo_texto
        self.refazer_pilha = Pilha()
        print(f"Texto atual: '{self.texto}'")

    def desfazer(self):
        if self.desfazer_pilha.is_vazia():
            print("Nada para desfazer.")
        else:
            self.refazer_pilha.empilhar(self.texto)
            self.texto = self.desfazer_pilha.desempilhar()
            print(f"(Desfazer) Texto atual: '{self.texto}'")

    def refazer(self):
        if self.refazer_pilha.is_vazia():
            print("Nada para refazer.")
        else:
            self.desfazer_pilha.empilhar(self.texto)
            self.texto = self.refazer_pilha.desempilhar()
            print(f"(Refazer) Texto atual: '{self.texto}'")

    def mostrar_texto(self):
        print(f"Texto atual: '{self.texto}'")


editor = EditorTexto()

editor.escrever("Olá")
editor.escrever(" pessoal")
editor.escrever("!")

editor.desfazer()
editor.desfazer()
editor.refazer()
editor.escrever("!!!")
editor.mostrar_texto()

"""9. Crie uma estrutura que possa ler uma expressão matemática do tipo (2+3)*(8-9)/(7^3) e apresente todos
os operadores matemáticos existente nessa expressão, utilize a pilha para responder a questão.
"""

def extrair_operadores(expressao):
    operadores_validos = ['+', '-', '*', '/', '^']
    pilha_operadores = Pilha()

    for char in expressao:
        if char in operadores_validos:
            pilha_operadores.empilhar(char)


    print("Operadores encontrados na expressão:")
    while not pilha_operadores.is_vazia():
        print(pilha_operadores.desempilhar())

expressao = "(2+3)*(8-9)/(7^3)"
extrair_operadores(expressao)

"""10. Palíndromos são palavras, frases ou sequências que mantêm sua mesma forma quando invertidos. Por
exemplo, a palavra "radar" é um palíndromo, pois se você a ler de trás para frente, ela ainda será "radar".
Construa um programa que possa ler uma palavra ou frase e dizer se ela é um Palíndromo, use a
estrutura de pilha para responder essa questão.
"""

def eh_palindromo(texto):
    pilha = Pilha()


    texto_formatado = ''.join(c.lower() for c in texto if c.isalnum())


    for char in texto_formatado:
        pilha.empilhar(char)


    texto_invertido = ''
    while not pilha.is_vazia():
        texto_invertido += pilha.desempilhar()


    if texto_formatado == texto_invertido:
        print(f"'{texto}' é um palíndromo.")
    else:
        print(f"'{texto}' NÃO é um palíndromo.")


eh_palindromo("radar")
eh_palindromo("Ame a ema")
eh_palindromo("Python")
eh_palindromo("Socorram me subi no onibus em Marrocos")